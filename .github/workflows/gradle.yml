name: Build MoBends

on:
  push:
    branches: [ "1.X/forge-1.12" ]
  pull_request:
    branches: [ "1.X/forge-1.12" ]

jobs:
  comprehensive-api-migration:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
      issues: write
      
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: ☕ Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: 🔧 Create Comprehensive Migration Script
      run: |
        cat > comprehensive_migration.py << 'EOF'
        #!/usr/bin/env python3
        """
        MoBends Comprehensive Migration Script for Minecraft 1.20.1
        Handles all major package and class changes between versions
        """
        
        import os
        import re
        import glob
        import json
        from pathlib import Path
        from typing import Dict, List, Set, Tuple
        
        class MoBendsMigrator:
            def __init__(self):
                self.modified_files = []
                self.errors = []
                self.migration_stats = {
                    'package_changes': 0,
                    'class_changes': 0,
                    'method_changes': 0,
                    'import_changes': 0
                }
                
                # Complete package and class mapping for MC 1.20.1
                self.package_mappings = {
                    # Entity packages
                    'net.minecraft.entity': 'net.minecraft.world.entity',
                    'net.minecraft.entity.EntityLivingBase': 'net.minecraft.world.entity.LivingEntity',
                    'net.minecraft.entity.Entity': 'net.minecraft.world.entity.Entity',
                    'net.minecraft.entity.EntityLiving': 'net.minecraft.world.entity.Mob',
                    'net.minecraft.entity.EntityList': 'net.minecraft.world.entity.EntityType',
                    
                    # Block packages
                    'net.minecraft.block.BlockStairs': 'net.minecraft.world.level.block.StairBlock',
                    'net.minecraft.block.BlockStaticLiquid': 'net.minecraft.world.level.block.LiquidBlock',
                    'net.minecraft.block.BlockLadder': 'net.minecraft.world.level.block.LadderBlock',
                    'net.minecraft.block.BlockVine': 'net.minecraft.world.level.block.VineBlock',
                    'net.minecraft.block.state.IBlockState': 'net.minecraft.world.level.block.state.BlockState',
                    
                    # Util packages
                    'net.minecraft.util.math.AxisAlignedBB': 'net.minecraft.world.phys.AABB',
                    'net.minecraft.util.math.BlockPos': 'net.minecraft.core.BlockPos',
                    'net.minecraft.util.math.MathHelper': 'net.minecraft.util.Mth',
                    'net.minecraft.util.math.Vec3d': 'net.minecraft.world.phys.Vec3',
                    'net.minecraft.util.ResourceLocation': 'net.minecraft.resources.ResourceLocation',
                    'net.minecraft.util.EnumFacing': 'net.minecraft.core.Direction',
                    
                    # Item packages
                    'net.minecraft.item.ItemStack': 'net.minecraft.world.item.ItemStack',
                    'net.minecraft.item.EnumAction': 'net.minecraft.world.item.UseAnim',
                    
                    # World packages
                    'net.minecraft.world.World': 'net.minecraft.world.level.Level',
                    
                    # Client packages
                    'net.minecraft.client.model.ModelBase': 'net.minecraft.client.model.Model',
                    'net.minecraft.client.model.ModelRenderer': 'net.minecraft.client.model.geom.ModelPart',
                    'net.minecraft.client.model.ModelBox': 'net.minecraft.client.model.geom.PartPose',
                    'net.minecraft.client.model.PositionTextureVertex': 'net.minecraft.client.model.geom.PartPose', # No direct equivalent
                    'net.minecraft.client.model.TexturedQuad': 'net.minecraft.client.model.geom.PartPose', # No direct equivalent
                    'net.minecraft.client.model.TextureOffset': '', # Removed
                    
                    # Renderer packages
                    'net.minecraft.client.renderer.entity.RenderLivingBase': 'net.minecraft.client.renderer.entity.LivingEntityRenderer',
                    'net.minecraft.client.renderer.entity.layers.LayerRenderer': 'net.minecraft.client.renderer.entity.layers.RenderLayer',
                    'net.minecraft.client.renderer.BufferBuilder': 'com.mojang.blaze3d.vertex.VertexConsumer',
                    'net.minecraft.client.renderer.VertexConsumer': 'com.mojang.blaze3d.vertex.VertexConsumer',
                    'net.minecraft.client.renderer.GLAllocation': '', # Removed
                    'net.minecraft.client.renderer.GlStateManager': 'com.mojang.blaze3d.systems.RenderSystem',
                    'net.minecraft.client.renderer.Tessellator': 'com.mojang.blaze3d.vertex.Tessellator',
                    
                    # Resources
                    'net.minecraft.client.resources.I18n': 'net.minecraft.network.chat.Component',
                    
                    # NBT
                    'net.minecraft.nbt.NBTTagCompound': 'net.minecraft.nbt.CompoundTag',
                    
                    # Network
                    'FriendlyByteBuf': 'net.minecraft.network.FriendlyByteBuf',
                    
                    # Forge config
                    'net.minecraftforge.common.config.Configuration': 'net.minecraftforge.common.ForgeConfigSpec'
                }
                
                # Method and field mappings
                self.method_mappings = {
                    # Entity methods
                    'EntityLivingBase': 'LivingEntity',
                    'getEntityWorld': 'level',
                    'worldObj': 'level',
                    'posX': 'getX',
                    'posY': 'getY', 
                    'posZ': 'getZ',
                    'rotationYaw': 'getYRot',
                    'rotationPitch': 'getXRot',
                    
                    # Rendering methods
                    'GlStateManager.pushMatrix': 'poseStack.pushPose',
                    'GlStateManager.popMatrix': 'poseStack.popPose',
                    'GlStateManager.translate': 'poseStack.translate',
                    'GlStateManager.rotate': 'poseStack.mulPose',
                    'GlStateManager.scale': 'poseStack.scale',
                    'GlStateManager.color': 'RenderSystem.setShaderColor',
                    'GlStateManager.enableBlend': 'RenderSystem.enableBlend',
                    'GlStateManager.disableBlend': 'RenderSystem.disableBlend',
                    
                    # NBT methods
                    'NBTTagCompound': 'CompoundTag',
                    'writeToNBT': 'save',
                    'readFromNBT': 'load',
                    
                    # Resource Location
                    'new ResourceLocation(': 'ResourceLocation.parse(',
                }
        
            def fix_imports(self, content: str) -> str:
                """Fix all import statements"""
                for old_import, new_import in self.package_mappings.items():
                    if new_import == '':  # Removed class
                        pattern = f'import {re.escape(old_import)};'
                        if re.search(pattern, content):
                            content = re.sub(pattern, f'// REMOVED: import {old_import};', content)
                            self.migration_stats['import_changes'] += 1
                    else:
                        pattern = f'import {re.escape(old_import)};'
                        if re.search(pattern, content):
                            content = re.sub(pattern, f'import {new_import};', content)
                            self.migration_stats['import_changes'] += 1
                
                return content
            
            def fix_class_references(self, content: str) -> str:
                """Fix class name references in code"""
                # Fix specific class name patterns
                replacements = {
                    r'\bEntityLivingBase\b': 'LivingEntity',
                    r'\bEntityLiving\b': 'Mob', 
                    r'\bEntity\b(?!\w)': 'Entity',  # Keep Entity as is, it's still valid
                    r'\bModelBase\b': 'Model',
                    r'\bModelRenderer\b': 'ModelPart',
                    r'\bRenderLivingBase\b': 'LivingEntityRenderer',
                    r'\bLayerRenderer\b': 'RenderLayer',
                    r'\bBufferBuilder\b': 'VertexConsumer',
                    r'\bGlStateManager\b': 'RenderSystem',
                    r'\bNBTTagCompound\b': 'CompoundTag',
                    r'\bIBlockState\b': 'BlockState',
                    r'\bBlockPos\b': 'BlockPos',  # Same name
                    r'\bVec3d\b': 'Vec3',
                    r'\bEnumFacing\b': 'Direction',
                    r'\bEnumAction\b': 'UseAnim',
                    r'\bMathHelper\b': 'Mth',
                    r'\bAxisAlignedBB\b': 'AABB',
                    r'\bWorld\b(?=\s)': 'Level',
                    r'\bI18n\b': 'Component',
                }
                
                for pattern, replacement in replacements.items():
                    if re.search(pattern, content):
                        content = re.sub(pattern, replacement, content)
                        self.migration_stats['class_changes'] += 1
                
                return content
            
            def fix_method_calls(self, content: str) -> str:
                """Fix method and field calls"""
                # ResourceLocation constructor fixes
                content = re.sub(r'new ResourceLocation\(([^,)]+),\s*([^)]+)\)', 
                                r'ResourceLocation.fromNamespaceAndPath(\1, \2)', content)
                content = re.sub(r'new ResourceLocation\(([^,)]+)\)', 
                                r'ResourceLocation.parse(\1)', content)
                
                # Rendering method fixes
                content = re.sub(r'GlStateManager\.pushMatrix\(\)', 'poseStack.pushPose()', content)
                content = re.sub(r'GlStateManager\.popMatrix\(\)', 'poseStack.popPose()', content)
                content = re.sub(r'GlStateManager\.translate\(([^)]+)\)', r'poseStack.translate(\1)', content)
                content = re.sub(r'GlStateManager\.rotate\(([^)]+)\)', 
                                r'poseStack.mulPose(Axis.XP.rotationDegrees(\1)) /* TODO: Convert to proper quaternion */', content)
                content = re.sub(r'GlStateManager\.scale\(([^)]+)\)', r'poseStack.scale(\1)', content)
                content = re.sub(r'GlStateManager\.color\(([^)]+)\)', r'RenderSystem.setShaderColor(\1)', content)
                content = re.sub(r'GlStateManager\.enableBlend\(\)', 'RenderSystem.enableBlend()', content)
                content = re.sub(r'GlStateManager\.disableBlend\(\)', 'RenderSystem.disableBlend()', content)
                
                # Entity field/method fixes
                content = re.sub(r'\.worldObj\b', '.level', content)
                content = re.sub(r'\.posX\b', '.getX()', content) 
                content = re.sub(r'\.posY\b', '.getY()', content)
                content = re.sub(r'\.posZ\b', '.getZ()', content)
                content = re.sub(r'\.rotationYaw\b', '.getYRot()', content)
                content = re.sub(r'\.rotationPitch\b', '.getXRot()', content)
                
                # NBT method fixes
                content = re.sub(r'\.writeToNBT\(', '.save(', content)
                content = re.sub(r'\.readFromNBT\(', '.load(', content)
                
                self.migration_stats['method_changes'] += 1
                return content
            
            def add_required_imports(self, content: str, file_path: str) -> str:
                """Add required imports based on content"""
                required_imports = []
                
                # Check what imports are needed based on content
                if any(term in content for term in ['VertexConsumer', 'PoseStack', 'RenderSystem']):
                    required_imports.extend([
                        'import com.mojang.blaze3d.vertex.VertexConsumer;',
                        'import com.mojang.blaze3d.vertex.PoseStack;', 
                        'import com.mojang.blaze3d.systems.RenderSystem;',
                        'import com.mojang.math.Axis;'
                    ])
                
                if 'LivingEntity' in content:
                    required_imports.append('import net.minecraft.world.entity.LivingEntity;')
                
                if 'Entity' in content and 'LivingEntity' not in content:
                    required_imports.append('import net.minecraft.world.entity.Entity;')
                
                if 'Level' in content:
                    required_imports.append('import net.minecraft.world.level.Level;')
                    
                if 'BlockState' in content:
                    required_imports.append('import net.minecraft.world.level.block.state.BlockState;')
                    
                if 'Direction' in content:
                    required_imports.append('import net.minecraft.core.Direction;')
                    
                if 'CompoundTag' in content:
                    required_imports.append('import net.minecraft.nbt.CompoundTag;')
                
                if 'Vec3' in content:
                    required_imports.append('import net.minecraft.world.phys.Vec3;')
                    
                if 'AABB' in content:
                    required_imports.append('import net.minecraft.world.phys.AABB;')
                
                # Add imports if not already present
                if required_imports:
                    # Find the last import statement
                    import_matches = list(re.finditer(r'import\s+[^;]+;', content))
                    if import_matches:
                        last_import_end = import_matches[-1].end()
                        
                        # Filter out imports that already exist
                        new_imports = [imp for imp in required_imports if imp not in content]
                        
                        if new_imports:
                            import_block = '\n' + '\n'.join(new_imports)
                            content = content[:last_import_end] + import_block + content[last_import_end:]
                
                return content
            
            def handle_special_cases(self, content: str, file_path: str) -> str:
                """Handle special cases and complex transformations"""
                
                # Handle ModelPart extension issue (can't extend final class)
                if 'extends ModelPart' in content:
                    content = content.replace('extends ModelPart', '/* extends ModelPart - TODO: Reimplement as composition */')
                    content = '// WARNING: ModelPart is final in 1.20.1 - this class needs major refactoring\n' + content
                
                # Handle removed classes with TODO comments
                if 'GLAllocation' in content:
                    content = re.sub(r'GLAllocation\.[^;]+;', 
                                    '/* TODO: GLAllocation removed - implement alternative memory management */', content)
                
                # Handle Tessellator changes
                if 'Tessellator.getInstance().getBuilder()' in content:
                    content = content.replace('Tessellator.getInstance().getBuilder()', 
                                            'vertexConsumer /* TODO: Get VertexConsumer from MultiBufferSource parameter */')
                
                # Handle missing controller package
                if 'goblinbob.mobends.core.animation.controller' in content:
                    content = content.replace('import goblinbob.mobends.core.animation.controller.IAnimationController;',
                                            '// TODO: Create IAnimationController interface - package missing')
                    content = content.replace('IAnimationController', 'Object /* TODO: Implement IAnimationController */')
                
                # Handle ForgeConfigSpec migration
                if 'Configuration' in content and 'config' in file_path.lower():
                    content = content.replace('Configuration', 'ForgeConfigSpec')
                    content = content.replace('import net.minecraftforge.common.config.Configuration;',
                                            'import net.minecraftforge.common.ForgeConfigSpec;')
                
                return content
            
            def migrate_file(self, file_path: str) -> bool:
                """Migrate a single file"""
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        original_content = f.read()
                    
                    content = original_content
                    
                    # Apply all migrations
                    content = self.fix_imports(content)
                    content = self.fix_class_references(content)
                    content = self.fix_method_calls(content)
                    content = self.add_required_imports(content, file_path)
                    content = self.handle_special_cases(content, file_path)
                    
                    # Add migration header comment
                    if content != original_content:
                        header = f"""/*
         * MIGRATED TO MC 1.20.1 by automated script
         * This file has been automatically updated for Minecraft 1.20.1 compatibility
         * Manual review and testing required for proper functionality
         * Original file: {os.path.basename(file_path)}
         */
        
        """
                        content = header + content
                        
                        with open(file_path, 'w', encoding='utf-8') as f:
                            f.write(content)
                        
                        self.modified_files.append(file_path)
                        print(f"✓ Migrated: {file_path}")
                        return True
                        
                except Exception as e:
                    error_msg = f"Error migrating {file_path}: {e}"
                    self.errors.append(error_msg)
                    print(f"✗ {error_msg}")
                
                return False
            
            def process_all_files(self):
                """Process all Java files in the project"""
                print("🚀 Starting comprehensive MoBends migration to MC 1.20.1...")
                print("📂 Scanning for Java files...")
                
                java_files = glob.glob('**/*.java', recursive=True)
                print(f"📋 Found {len(java_files)} Java files to migrate")
                
                print("\n🔧 Applying comprehensive migrations...")
                
                for file_path in java_files:
                    self.migrate_file(file_path)
                
                # Generate migration report
                self.generate_migration_report()
                
                print(f"\n📊 Migration Summary:")
                print(f"   Files processed: {len(java_files)}")
                print(f"   Files modified: {len(self.modified_files)}")
                print(f"   Import changes: {self.migration_stats['import_changes']}")
                print(f"   Class changes: {self.migration_stats['class_changes']}")
                print(f"   Method changes: {self.migration_stats['method_changes']}")
                print(f"   Errors: {len(self.errors)}")
                
                if self.errors:
                    print(f"\n❌ Migration errors:")
                    for error in self.errors[:10]:  # Show first 10 errors
                        print(f"   • {error}")
                    if len(self.errors) > 10:
                        print(f"   ... and {len(self.errors) - 10} more errors")
            
            def generate_migration_report(self):
                """Generate detailed migration report"""
                report = {
                    'timestamp': str(__import__('datetime').datetime.now()),
                    'total_files': len(glob.glob('**/*.java', recursive=True)),
                    'modified_files': self.modified_files,
                    'migration_stats': self.migration_stats,
                    'errors': self.errors,
                    'manual_review_needed': [
                        'All ModelPart extensions need refactoring',
                        'Rendering code needs VertexConsumer parameter passing',
                        'Animation controller interface needs recreation',
                        'Memory management code needs GLAllocation alternatives',
                        'Config system needs ForgeConfigSpec migration'
                    ]
                }
                
                with open('mobends_migration_report.json', 'w') as f:
                    json.dump(report, f, indent=2)
                
                # Generate readable report
                with open('mobends_migration_summary.txt', 'w') as f:
                    f.write("MoBends MC 1.20.1 Migration Report\n")
                    f.write("="*50 + "\n\n")
                    f.write(f"Migration completed: {report['timestamp']}\n")
                    f.write(f"Files processed: {report['total_files']}\n")
                    f.write(f"Files modified: {len(self.modified_files)}\n")
                    f.write(f"Success rate: {len(self.modified_files)/report['total_files']*100:.1f}%\n\n")
                    
                    f.write("Migration Statistics:\n")
                    for stat, count in self.migration_stats.items():
                        f.write(f"  • {stat.replace('_', ' ').title()}: {count}\n")
                    
                    f.write(f"\nModified Files:\n")
                    for file in self.modified_files:
                        f.write(f"  ✓ {file}\n")
                    
                    f.write(f"\nManual Review Required:\n")
                    for item in report['manual_review_needed']:
                        f.write(f"  ⚠️  {item}\n")
                    
                    if self.errors:
                        f.write(f"\nErrors Encountered:\n")
                        for error in self.errors:
                            f.write(f"  ✗ {error}\n")
                    
                    f.write(f"\nNext Steps:\n")
                    f.write(f"  1. Review all modified files for correctness\n")
                    f.write(f"  2. Implement missing interfaces and classes\n")
                    f.write(f"  3. Refactor ModelPart extensions to use composition\n")
                    f.write(f"  4. Update rendering pipeline for VertexConsumer\n")
                    f.write(f"  5. Test mod functionality thoroughly\n")
                    f.write(f"  6. Run gradle build to identify remaining issues\n")
        
        # Run migration
        if __name__ == "__main__":
            migrator = MoBendsMigrator()
            migrator.process_all_files()
        EOF
        
        python3 comprehensive_migration.py

    - name: 📋 Check for Changes
      id: check_changes
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "📝 Changes detected - will commit and push"
          git status --short
        else
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "✅ No changes needed"
        fi

    - name: 🔍 Show Diff (if dry run)
      if: github.event.inputs.dry_run == 'true' && steps.check_changes.outputs.changes == 'true'
      run: |
        echo "🔍 Changes that would be made:"
        git diff --name-only
        echo ""
        echo "📄 Sample of changes:"
        git diff | head -100

    - name: 📝 Commit and Push Changes
      if: steps.check_changes.outputs.changes == 'true' && github.event.inputs.dry_run != 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # 配置Git
        git config --local user.email "z3407323905@outlook.com"
        git config --local user.name "OutlinedArc217"
        
        # 添加所有修改的文件
        git add -A
        
        # 创建提交消息
        cat > commit_message.txt << 'EOF'
        🔧 Auto-fix MoBends API compatibility for MC 1.20.1
        
        This automated fix addresses all major API compatibility issues:
        
        ✅ Fixed ResourceLocation deprecated constructors
        ✅ Replaced GlStateManager with RenderSystem
        ✅ Updated BufferBuilder to VertexConsumer
        ✅ Removed deprecated imports (GLAllocation, TextureOffset, etc.)
        ✅ Added modern rendering imports
        ✅ Updated matrix operations for new API
        ✅ Added compatibility notes for verification
        
        Files modified: See mobends_api_fix_summary.txt
        
        ⚠️  Manual verification needed:
        - Check VertexConsumer usage in rendering code
        - Verify ModLoadingContext calls work with Forge version
        - Test quaternion rotations replace old rotate calls
        - Review pose stack transformations
        
        Auto-generated by GitHub Actions 🤖
        EOF
        
        # 提交更改
        git commit -F commit_message.txt
        
        # 推送到远程仓库
        git push origin 1.X/forge-1.12
        
        echo "✅ Changes committed and pushed successfully!"

    - name: 📤 Upload Fix Reports
      if: steps.check_changes.outputs.changes == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: mobends-api-fix-reports
        path: |
          mobends_api_fix_summary.txt
          mobends_api_fix_report.json

    - name: 🧪 Test Build After Fixes
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        echo "🔨 Testing build after API fixes..."
        set +e  # Don't fail the action if build fails
        ./gradlew build --no-daemon --stacktrace
        BUILD_EXIT_CODE=$?
        
        if [ $BUILD_EXIT_CODE -eq 0 ]; then
          echo "✅ Build successful after fixes!"
        else
          echo "⚠️  Build still has issues - manual review needed"
          echo "This is expected as some fixes may require additional manual adjustments"
        fi
