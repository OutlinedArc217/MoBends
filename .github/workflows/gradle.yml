name: Build MoBends

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  fix-build-issues:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: ☕ Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 🔧 Create MC 1.20.1 Build Fixer
        run: |
          cat > mobends_mc1201_fixer.py << 'EOF'
          #!/usr/bin/env python3
          """
          MoBends Build Fixer for Minecraft 1.20.1
          Fixes compilation errors specific to MC 1.20.1 API changes
          """
          import os
          import re
          import glob
          import json
          import shutil
          from pathlib import Path
          from datetime import datetime
          from typing import Dict, List, Set, Tuple

          class MoBendsMC1201Fixer:
              def __init__(self):
                  self.modified_files = []
                  self.renamed_files = []
                  self.created_files = []
                  self.errors = []

              def fix_file_naming_issues(self):
                  """Fix classes that don't match their file names"""
                  print("\n🔧 Fixing file naming issues...")
                  # Map of wrong class names to correct file names
                  file_fixes = [
                      {
                          'current_file': 'src/main/java/goblinbob/mobends/core/math/vector/Vec3d.java',
                          'wrong_class': 'Vec3',
                          'correct_class': 'Vec3d',
                          'description': 'Vec3 should be Vec3d to match filename'
                      },
                      {
                          'current_file': 'src/main/java/goblinbob/mobends/core/network/NetworkConfiguration.java',
                          'wrong_class': 'NetworkForgeConfigSpec',
                          'correct_class': 'NetworkConfiguration',
                          'description': 'NetworkForgeConfigSpec should be NetworkConfiguration to match filename'
                      }
                  ]

                  for fix in file_fixes:
                      if os.path.exists(fix['current_file']):
                          try:
                              with open(fix['current_file'], 'r', encoding='utf-8') as f:
                                  content = f.read()

                              # Replace class declaration
                              pattern = rf"public\s+class\s+{fix['wrong_class']}\s+"
                              replacement = f"public class {fix['correct_class']} "
                              if re.search(pattern, content):
                                  content = re.sub(pattern, replacement, content)

                              # Also replace constructor names if any
                              content = re.sub(rf"\b{fix['wrong_class']}\s*\(", f"{fix['correct_class']}(", content)

                              with open(fix['current_file'], 'w', encoding='utf-8') as f:
                                  f.write(content)
                              self.modified_files.append(fix['current_file'])
                              print(f"✓ Fixed class name in {fix['current_file']}: {fix['description']}")
                          except Exception as e:
                              self.errors.append(f"Error fixing {fix['current_file']}: {e}")

              def fix_renderer_generics_mc1201(self):
                  """Fix renderer generics for MC 1.20.1"""
                  print("\n🔧 Fixing renderer generics for MC 1.20.1...")
                  # In MC 1.20.1, LivingEntityRenderer has changed
                  patterns = [
                      {
                          # LivingEntityRenderer in 1.20.1 takes entity type and model type
                          'pattern': r'LivingEntityRenderer<\s*\?\s*extends\s*([^,>]+)\s*>',
                          'replacement': r'LivingEntityRenderer<\1, EntityModel<\1>>',
                          'description': 'Fix LivingEntityRenderer for MC 1.20.1'
                      },
                      {
                          # Fix specific entity renderer declarations
                          'pattern': r'LivingEntityRenderer<([^,>]+)>(?!\s*,)',
                          'replacement': r'LivingEntityRenderer<\1, EntityModel<\1>>',
                          'description': 'Add model type parameter to LivingEntityRenderer'
                      },
                      {
                          # Fix RenderLayer generics
                          'pattern': r'RenderLayer<\s*\?\s*>',
                          'replacement': r'RenderLayer<?, ?>',
                          'description': 'Fix RenderLayer wildcards'
                      }
                  ]

                  java_files = glob.glob('**/*.java', recursive=True)
                  for file_path in java_files:
                      try:
                          with open(file_path, 'r', encoding='utf-8') as f:
                              content = f.read()
                          original_content = content

                          for pattern_info in patterns:
                              if re.search(pattern_info['pattern'], content):
                                  content = re.sub(pattern_info['pattern'], pattern_info['replacement'], content)

                          if content != original_content:
                              with open(file_path, 'w', encoding='utf-8') as f:
                                  f.write(content)
                              self.modified_files.append(file_path)
                              print(f"✓ Fixed generics in {file_path}")
                      except Exception as e:
                          self.errors.append(f"Error processing {file_path}: {e}")

              def create_missing_classes(self):
                  """Create missing classes for MC 1.20.1"""
                  print("\n🔧 Creating missing classes...")
                  # NetworkConfiguration class for MC 1.20.1
                  network_config_path = 'src/main/java/goblinbob/mobends/core/network/NetworkConfiguration.java'
                  if not os.path.exists(network_config_path) or 'NetworkForgeConfigSpec' in open(network_config_path).read():
                      os.makedirs(os.path.dirname(network_config_path), exist_ok=True)
                      network_config_content = '''package goblinbob.mobends.core.network;

                      import net.minecraftforge.common.ForgeConfigSpec;
                      import net.minecraftforge.network.NetworkDirection;
                      import net.minecraftforge.network.NetworkRegistry;
                      import net.minecraftforge.network.simple.SimpleChannel;
                      import net.minecraft.resources.ResourceLocation;

                      /**
                       * Network configuration for MoBends - MC 1.20.1
                       * Auto-generated to fix compilation errors
                       */
                      public class NetworkConfiguration {
                          private static final String PROTOCOL_VERSION = "1";
                          public static final SimpleChannel CHANNEL = NetworkRegistry.newSimpleChannel(
                              new ResourceLocation("mobends", "main"),
                              () -> PROTOCOL_VERSION,
                              PROTOCOL_VERSION::equals,
                              PROTOCOL_VERSION::equals
                          );

                          private final ForgeConfigSpec.BooleanValue networkEnabled;
                          private final ForgeConfigSpec.IntValue syncRate;

                          public NetworkConfiguration(ForgeConfigSpec.Builder builder) {
                              builder.push("network");
                              this.networkEnabled = builder
                                  .comment("Enable network synchronization features")
                                  .define("enabled", true);
                              this.syncRate = builder
                                  .comment("Network synchronization rate (ticks)")
                                  .defineInRange("syncRate", 20, 1, 100);
                              builder.pop();
                          }

                          public boolean isNetworkEnabled() {
                              return networkEnabled.get();
                          }

                          public int getSyncRate() {
                              return syncRate.get();
                          }

                          public static void registerMessages() {
                              // Register network messages here
                          }
                      }'''
                      with open(network_config_path, 'w', encoding='utf-8') as f:
                          f.write(network_config_content)
                      self.created_files.append(network_config_path)
                      print(f"✓ Created {network_config_path}")

              def fix_imports_mc1201(self):
                  """Fix imports for MC 1.20.1"""
                  print("\n🔧 Fixing imports for MC 1.20.1...")
                  import_fixes = {
                      # MC 1.20.1 specific imports
                      'FriendlyByteBuf': 'import net.minecraft.network.FriendlyByteBuf;',
                      'EntityModel': 'import net.minecraft.client.model.EntityModel;',
                      'ForgeConfigSpec': 'import net.minecraftforge.common.ForgeConfigSpec;',
                      'ResourceLocation': 'import net.minecraft.resources.ResourceLocation;',
                      'PoseStack': 'import com.mojang.blaze3d.vertex.PoseStack;',
                      'MultiBufferSource': 'import net.minecraft.client.renderer.MultiBufferSource;',
                      'VertexConsumer': 'import com.mojang.blaze3d.vertex.VertexConsumer;',
                      'RenderSystem': 'import com.mojang.blaze3d.systems.RenderSystem;'
                  }

                  # Remove old imports that don't exist in 1.20.1
                  old_imports_to_remove = [
                      'import net.minecraft.client.renderer.GlStateManager;',
                      'import net.minecraft.client.renderer.BufferBuilder;',
                      'import net.minecraft.client.renderer.Tessellator;',
                      'import net.minecraft.client.renderer.vertex.DefaultVertexFormats;'
                  ]

                  java_files = glob.glob('**/*.java', recursive=True)
                  for file_path in java_files:
                      try:
                          with open(file_path, 'r', encoding='utf-8') as f:
                              content = f.read()
                          original_content = content

                          # Remove old imports
                          for old_import in old_imports_to_remove:
                              if old_import in content:
                                  content = content.replace(old_import, f'// MC 1.20.1: Removed - {old_import}')

                          # Add new imports where needed
                          for class_name, import_stmt in import_fixes.items():
                              if class_name in content and import_stmt not in content:
                                  # Find the last import statement
                                  import_matches = list(re.finditer(r'import\s+[^;]+;', content))
                                  if import_matches:
                                      last_import_end = import_matches[-1].end()
                                      content = content[:last_import_end] + '\n' + import_stmt + content[last_import_end:]

                          if content != original_content:
                              with open(file_path, 'w', encoding='utf-8') as f:
                                  f.write(content)
                              self.modified_files.append(file_path)
                              print(f"✓ Fixed imports in {file_path}")
                      except Exception as e:
                          self.errors.append(f"Error processing {file_path}: {e}")

              def fix_object_type_parameters(self):
                  """Fix Object type that doesn't take parameters"""
                  print("\n🔧 Fixing Object type parameters...")
                  # Fix the specific pattern from the error
                  pattern = r'Object\s*/\*[^*]*\*/\s*<\?>'
                  replacement = 'Object /* TODO: Implement IAnimationController interface */'

                  java_files = glob.glob('**/*.java', recursive=True)
                  for file_path in java_files:
                      try:
                          with open(file_path, 'r', encoding='utf-8') as f:
                              content = f.read()
                          if re.search(pattern, content):
                              content = re.sub(pattern, replacement, content)
                              with open(file_path, 'w', encoding='utf-8') as f:
                                  f.write(content)
                              self.modified_files.append(file_path)
                              print(f"✓ Fixed Object type parameters in {file_path}")
                      except Exception as e:
                          self.errors.append(f"Error processing {file_path}: {e}")

              def fix_mutator_generics(self):
                  """Fix Mutator class generic parameters"""
                  print("\n🔧 Fixing Mutator generics...")
                  # The Mutator class seems to have wrong number of type arguments
                  mutator_fixes = [
                      {
                          'pattern': r'Mutator<([^,>]+),\s*([^,>]+),\s*\?>',
                          'replacement': r'Mutator<\1, \2>',
                          'description': 'Remove third type parameter from Mutator'
                      },
                      {
                          'pattern': r'Map<([^,>]+),\s*Mutator<([^>]+)>>',
                          'replacement': r'Map<\1, Mutator<\2>>',
                          'description': 'Fix Mutator in Map declarations'
                      }
                  ]

                  java_files = glob.glob('**/*.java', recursive=True)
                  for file_path in java_files:
                      try:
                          with open(file_path, 'r', encoding='utf-8') as f:
                              content = f.read()
                          original_content = content

                          for fix in mutator_fixes:
                              if re.search(fix['pattern'], content):
                                  content = re.sub(fix['pattern'], fix['replacement'], content)

                          if content != original_content:
                              with open(file_path, 'w', encoding='utf-8') as f:
                                  f.write(content)
                              self.modified_files.append(file_path)
                              print(f"✓ Fixed Mutator generics in {file_path}")
                      except Exception as e:
                          self.errors.append(f"Error processing {file_path}: {e}")

              def process_all_fixes(self):
                  """Run all fixes in the correct order"""
                  print("🔧 Starting MoBends build fixes for MC 1.20.1...")
                  # Run fixes in order
                  self.fix_file_naming_issues()
                  self.create_missing_classes()
                  self.fix_renderer_generics_mc1201()
                  self.fix_imports_mc1201()
                  self.fix_object_type_parameters()
                  self.fix_mutator_generics()

                  # Generate report
                  self.generate_report()
                  print(f"\n✅ Fix process completed")

              def generate_report(self):
                  """Generate a summary report of all changes"""
                  print("\n📋 Fix Report:")
                  print(f"  Modified files: {len(self.modified_files)}")
                  for file in self.modified_files[:5]:
                      print(f"    - {file}")
                  if len(self.modified_files) > 5:
                      print(f"    - ... and {len(self.modified_files) - 5} more")
                      
                  print(f"\n  Created files: {len(self.created_files)}")
                  for file in self.created_files:
                      print(f"    - {file}")
                      
                  print(f"\n  Renamed files: {len(self.renamed_files)}")
                  for old, new in self.renamed_files[:5]:
                      print(f"    - {old} → {new}")
                  if len(self.renamed_files) > 5:
                      print(f"    - ... and {len(self.renamed_files) - 5} more")
                      
                  print(f"\n  Errors encountered: {len(self.errors)}")
                  for error in self.errors:
                      print(f"    - ❌ {error}")

          if __name__ == "__main__":
              fixer = MoBendsMC1201Fixer()
              fixer.process_all_fixes()
              
              # Exit with error code if there were errors
              exit(1 if len(fixer.errors) > 0 else 0)
          EOF
          chmod +x mobends_mc1201_fixer.py

      - name: 🛠️ Run MC 1.20.1 Build Fixer
        run: |
          ./mobends_mc1201_fixer.py

      - name: 📝 Check for Changes
        id: check_changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      - name: 📋 Check for Changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "📝 Changes detected - will commit and push"
          git status --short
          else
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "✅ No changes needed"
          fi

      - name: 📝 Commit and Push Changes
        env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 配置Git
          git config --local user.email "z3407323905@outlook.com"
          git config --local user.name "OutlinedArc217"
        
          # 添加所有修改的文件
          git add -A
        
          # 创建提交消息
          cat > commit_message.txt << 'EOF'
          Auto-generated by GitHub Actions 🤖
          EOF
        
          # 提交更改
          git commit -F commit_message.txt
        
          # 推送到远程仓库
          git push origin master
        
          echo "✅ Changes committed and pushed successfully!"
